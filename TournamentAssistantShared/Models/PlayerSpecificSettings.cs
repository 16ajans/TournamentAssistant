// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: player_specific_settings.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TournamentAssistantShared.Models {

  /// <summary>Holder for reflection information generated from player_specific_settings.proto</summary>
  public static partial class PlayerSpecificSettingsReflection {

    #region Descriptor
    /// <summary>File descriptor for player_specific_settings.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerSpecificSettingsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5wbGF5ZXJfc3BlY2lmaWNfc2V0dGluZ3MucHJvdG8SIFRvdXJuYW1lbnRB",
            "c3Npc3RhbnRTaGFyZWQuTW9kZWxzIo8FChZQbGF5ZXJTcGVjaWZpY1NldHRp",
            "bmdzEhUKDXBsYXllcl9oZWlnaHQYASABKAISEgoKc2Z4X3ZvbHVtZRgCIAEo",
            "AhIdChVzYWJlcl90cmFpbF9pbnRlbnNpdHkYAyABKAISIwobbm90ZV9qdW1w",
            "X3N0YXJ0X2JlYXRfb2Zmc2V0GAQgASgCEiAKGG5vdGVfanVtcF9maXhlZF9k",
            "dXJhdGlvbhgFIAEoAhJXCgdvcHRpb25zGAYgASgOMkYuVG91cm5hbWVudEFz",
            "c2lzdGFudFNoYXJlZC5Nb2RlbHMuUGxheWVyU3BlY2lmaWNTZXR0aW5ncy5Q",
            "bGF5ZXJPcHRpb25zEn8KIG5vdGVfanVtcF9kdXJhdGlvbl90eXBlX3NldHRp",
            "bmdzGAcgASgOMlUuVG91cm5hbWVudEFzc2lzdGFudFNoYXJlZC5Nb2RlbHMu",
            "UGxheWVyU3BlY2lmaWNTZXR0aW5ncy5Ob3RlSnVtcER1cmF0aW9uVHlwZVNl",
            "dHRpbmdzItABCg1QbGF5ZXJPcHRpb25zEggKBE5vbmUQABIOCgpMZWZ0SGFu",
            "ZGVkEAESEAoMU3RhdGljTGlnaHRzEAISCQoFTm9IdWQQBBIPCgtBZHZhbmNl",
            "ZEh1ZBAIEhAKDFJlZHVjZURlYnJpcxAQEhQKEEF1dG9QbGF5ZXJIZWlnaHQQ",
            "IBIRCg1Ob0ZhaWxFZmZlY3RzEEASEAoLQXV0b1Jlc3RhcnQQgAESGAoTSGlk",
            "ZU5vdGVTcGF3bkVmZmVjdBCAAhIQCgtBZGFwdGl2ZVNmeBCABCI3ChxOb3Rl",
            "SnVtcER1cmF0aW9uVHlwZVNldHRpbmdzEgsKB0R5bmFtaWMQABIKCgZTdGF0",
            "aWMQAUIjqgIgVG91cm5hbWVudEFzc2lzdGFudFNoYXJlZC5Nb2RlbHNiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TournamentAssistantShared.Models.PlayerSpecificSettings), global::TournamentAssistantShared.Models.PlayerSpecificSettings.Parser, new[]{ "PlayerHeight", "SfxVolume", "SaberTrailIntensity", "NoteJumpStartBeatOffset", "NoteJumpFixedDuration", "Options", "NoteJumpDurationTypeSettings" }, null, new[]{ typeof(global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions), typeof(global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerSpecificSettings : pb::IMessage<PlayerSpecificSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerSpecificSettings> _parser = new pb::MessageParser<PlayerSpecificSettings>(() => new PlayerSpecificSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayerSpecificSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TournamentAssistantShared.Models.PlayerSpecificSettingsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerSpecificSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerSpecificSettings(PlayerSpecificSettings other) : this() {
      playerHeight_ = other.playerHeight_;
      sfxVolume_ = other.sfxVolume_;
      saberTrailIntensity_ = other.saberTrailIntensity_;
      noteJumpStartBeatOffset_ = other.noteJumpStartBeatOffset_;
      noteJumpFixedDuration_ = other.noteJumpFixedDuration_;
      options_ = other.options_;
      noteJumpDurationTypeSettings_ = other.noteJumpDurationTypeSettings_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerSpecificSettings Clone() {
      return new PlayerSpecificSettings(this);
    }

    /// <summary>Field number for the "player_height" field.</summary>
    public const int PlayerHeightFieldNumber = 1;
    private float playerHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PlayerHeight {
      get { return playerHeight_; }
      set {
        playerHeight_ = value;
      }
    }

    /// <summary>Field number for the "sfx_volume" field.</summary>
    public const int SfxVolumeFieldNumber = 2;
    private float sfxVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SfxVolume {
      get { return sfxVolume_; }
      set {
        sfxVolume_ = value;
      }
    }

    /// <summary>Field number for the "saber_trail_intensity" field.</summary>
    public const int SaberTrailIntensityFieldNumber = 3;
    private float saberTrailIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SaberTrailIntensity {
      get { return saberTrailIntensity_; }
      set {
        saberTrailIntensity_ = value;
      }
    }

    /// <summary>Field number for the "note_jump_start_beat_offset" field.</summary>
    public const int NoteJumpStartBeatOffsetFieldNumber = 4;
    private float noteJumpStartBeatOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NoteJumpStartBeatOffset {
      get { return noteJumpStartBeatOffset_; }
      set {
        noteJumpStartBeatOffset_ = value;
      }
    }

    /// <summary>Field number for the "note_jump_fixed_duration" field.</summary>
    public const int NoteJumpFixedDurationFieldNumber = 5;
    private float noteJumpFixedDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NoteJumpFixedDuration {
      get { return noteJumpFixedDuration_; }
      set {
        noteJumpFixedDuration_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 6;
    private global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions options_ = global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    /// <summary>Field number for the "note_jump_duration_type_settings" field.</summary>
    public const int NoteJumpDurationTypeSettingsFieldNumber = 7;
    private global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings noteJumpDurationTypeSettings_ = global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings.Dynamic;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings NoteJumpDurationTypeSettings {
      get { return noteJumpDurationTypeSettings_; }
      set {
        noteJumpDurationTypeSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayerSpecificSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayerSpecificSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayerHeight, other.PlayerHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SfxVolume, other.SfxVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SaberTrailIntensity, other.SaberTrailIntensity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoteJumpStartBeatOffset, other.NoteJumpStartBeatOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoteJumpFixedDuration, other.NoteJumpFixedDuration)) return false;
      if (Options != other.Options) return false;
      if (NoteJumpDurationTypeSettings != other.NoteJumpDurationTypeSettings) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayerHeight);
      if (SfxVolume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SfxVolume);
      if (SaberTrailIntensity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SaberTrailIntensity);
      if (NoteJumpStartBeatOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoteJumpStartBeatOffset);
      if (NoteJumpFixedDuration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoteJumpFixedDuration);
      if (Options != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None) hash ^= Options.GetHashCode();
      if (NoteJumpDurationTypeSettings != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings.Dynamic) hash ^= NoteJumpDurationTypeSettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerHeight != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PlayerHeight);
      }
      if (SfxVolume != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SfxVolume);
      }
      if (SaberTrailIntensity != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SaberTrailIntensity);
      }
      if (NoteJumpStartBeatOffset != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(NoteJumpStartBeatOffset);
      }
      if (NoteJumpFixedDuration != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(NoteJumpFixedDuration);
      }
      if (Options != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Options);
      }
      if (NoteJumpDurationTypeSettings != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings.Dynamic) {
        output.WriteRawTag(56);
        output.WriteEnum((int) NoteJumpDurationTypeSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerHeight != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PlayerHeight);
      }
      if (SfxVolume != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SfxVolume);
      }
      if (SaberTrailIntensity != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SaberTrailIntensity);
      }
      if (NoteJumpStartBeatOffset != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(NoteJumpStartBeatOffset);
      }
      if (NoteJumpFixedDuration != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(NoteJumpFixedDuration);
      }
      if (Options != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Options);
      }
      if (NoteJumpDurationTypeSettings != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings.Dynamic) {
        output.WriteRawTag(56);
        output.WriteEnum((int) NoteJumpDurationTypeSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PlayerHeight != 0F) {
        size += 1 + 4;
      }
      if (SfxVolume != 0F) {
        size += 1 + 4;
      }
      if (SaberTrailIntensity != 0F) {
        size += 1 + 4;
      }
      if (NoteJumpStartBeatOffset != 0F) {
        size += 1 + 4;
      }
      if (NoteJumpFixedDuration != 0F) {
        size += 1 + 4;
      }
      if (Options != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Options);
      }
      if (NoteJumpDurationTypeSettings != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings.Dynamic) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NoteJumpDurationTypeSettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayerSpecificSettings other) {
      if (other == null) {
        return;
      }
      if (other.PlayerHeight != 0F) {
        PlayerHeight = other.PlayerHeight;
      }
      if (other.SfxVolume != 0F) {
        SfxVolume = other.SfxVolume;
      }
      if (other.SaberTrailIntensity != 0F) {
        SaberTrailIntensity = other.SaberTrailIntensity;
      }
      if (other.NoteJumpStartBeatOffset != 0F) {
        NoteJumpStartBeatOffset = other.NoteJumpStartBeatOffset;
      }
      if (other.NoteJumpFixedDuration != 0F) {
        NoteJumpFixedDuration = other.NoteJumpFixedDuration;
      }
      if (other.Options != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None) {
        Options = other.Options;
      }
      if (other.NoteJumpDurationTypeSettings != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings.Dynamic) {
        NoteJumpDurationTypeSettings = other.NoteJumpDurationTypeSettings;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PlayerHeight = input.ReadFloat();
            break;
          }
          case 21: {
            SfxVolume = input.ReadFloat();
            break;
          }
          case 29: {
            SaberTrailIntensity = input.ReadFloat();
            break;
          }
          case 37: {
            NoteJumpStartBeatOffset = input.ReadFloat();
            break;
          }
          case 45: {
            NoteJumpFixedDuration = input.ReadFloat();
            break;
          }
          case 48: {
            Options = (global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions) input.ReadEnum();
            break;
          }
          case 56: {
            NoteJumpDurationTypeSettings = (global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            PlayerHeight = input.ReadFloat();
            break;
          }
          case 21: {
            SfxVolume = input.ReadFloat();
            break;
          }
          case 29: {
            SaberTrailIntensity = input.ReadFloat();
            break;
          }
          case 37: {
            NoteJumpStartBeatOffset = input.ReadFloat();
            break;
          }
          case 45: {
            NoteJumpFixedDuration = input.ReadFloat();
            break;
          }
          case 48: {
            Options = (global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions) input.ReadEnum();
            break;
          }
          case 56: {
            NoteJumpDurationTypeSettings = (global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.NoteJumpDurationTypeSettings) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerSpecificSettings message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum PlayerOptions {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("LeftHanded")] LeftHanded = 1,
        [pbr::OriginalName("StaticLights")] StaticLights = 2,
        [pbr::OriginalName("NoHud")] NoHud = 4,
        [pbr::OriginalName("AdvancedHud")] AdvancedHud = 8,
        [pbr::OriginalName("ReduceDebris")] ReduceDebris = 16,
        [pbr::OriginalName("AutoPlayerHeight")] AutoPlayerHeight = 32,
        [pbr::OriginalName("NoFailEffects")] NoFailEffects = 64,
        [pbr::OriginalName("AutoRestart")] AutoRestart = 128,
        [pbr::OriginalName("HideNoteSpawnEffect")] HideNoteSpawnEffect = 256,
        [pbr::OriginalName("AdaptiveSfx")] AdaptiveSfx = 512,
      }

      public enum NoteJumpDurationTypeSettings {
        [pbr::OriginalName("Dynamic")] Dynamic = 0,
        [pbr::OriginalName("Static")] Static = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
